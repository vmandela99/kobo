install.packages("kobotoolR")
library(httr)
library(jsonlite)
library(dplyr)
base_url <- "https://kc.kobotoolbox.org/api/v1/data"
# Set your variables
api_token <- "86de4c11a3b1c2de54279896dfa70099558451eb"
form_uid <- "a93dwJU48DPBTdyA4oxdt2"  # from your form URL (after /assets/ or /forms/)
base_url <- "https://kc.kobotoolbox.org/api/v1/data"
# Make API call
response <- GET(
url = paste0(base_url, "/", form_uid),
authenticate(api_token, ""),
accept_json()
)
library(httr)
library(jsonlite)
library(dplyr)
# Set your variables
api_token <- "86de4c11a3b1c2de54279896dfa70099558451eb"
form_uid <- "akWjF8fLC662zYmYYh6YwR"  # from your form URL (after /assets/ or /forms/)
base_url <- "https://kc.kobotoolbox.org/api/v1/data"
# Make API call
response <- GET(
url = paste0(base_url, "/", form_uid),
authenticate(api_token, ""),
accept_json()
)
rm(list = ls())
# Set your variables
api_token <- "86de4c11a3b1c2de54279896dfa70099558451eb"
form_uid <- "akWjF8fLC662zYmYYh6YwR"  # from your form URL (after /assets/ or /forms/)
base_url <- "https://kc.kobotoolbox.org/api/v1/data"
# Make API call
response <- GET(
url = paste0(base_url, "/", form_uid),
authenticate(api_token, ""),
accept_json()
)
# Convert to dataframe
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
View(data)
base_url <- "https://kf.kobotoolbox.org/#/forms/"#"https://kc.kobotoolbox.org/api/v1/data"
# Set your variables
api_token <- "86de4c11a3b1c2de54279896dfa70099558451eb"
form_uid <- "akWjF8fLC662zYmYYh6YwR"  # from your form URL (after /assets/ or /forms/)
base_url <- "https://kf.kobotoolbox.org/#/forms/"#"https://kc.kobotoolbox.org/api/v1/data"
# Make API call
response <- GET(
url = paste0(base_url, "/", form_uid),
authenticate(api_token, ""),
accept_json()
)
# Your credentials
username <- "vickman"
api_token <- "86de4c11a3b1c2de54279896dfa70099558451eb"  # use as password
# Your form ID (get it from the URL after /assets/...)
form_uid <- "akWjF8fLC662zYmYYh6YwR"
library(httr2)
# Build the request
req <- request(url) %>%
req_auth_basic(username, api_token) %>%
req_headers(`Accept` = "application/json") %>%
req_user_agent("R KoboToolbox Client")
# Construct the API URL
url <- paste0("https://kc.kobotoolbox.org/api/v1/data/", form_uid)
# Build the request
req <- request(url) %>%
req_auth_basic(username, api_token) %>%
req_headers(`Accept` = "application/json") %>%
req_user_agent("R KoboToolbox Client")
resp <- req_perform(req)
# Construct the API URL
url <- paste0("https://kf.kobotoolbox.org/#/forms/", form_uid)
# Build the request
req <- request(url) %>%
req_auth_basic(username, api_token) %>%
req_headers(`Accept` = "application/json") %>%
req_user_agent("R KoboToolbox Client")
# Send the request
resp <- req_perform(req)
# Check the status code (200 = success)
resp_status(resp)
# Parse the response body as text then JSON
data_json <- resp_body_string(resp)
data_df <- fromJSON(data_json, flatten = TRUE)
View(response)
response[["content"]]
# Construct the API URL
url <- paste0("https://kf.kobotoolbox.org/api/v1/data/", form_uid)
# Build the request
req <- request(url) %>%
req_auth_basic(username, api_token) %>%
req_headers(`Accept` = "application/json") %>%
req_user_agent("R KoboToolbox Client")
# Send the request
resp <- req_perform(req)
req_list <- request("https://kf.kobotoolbox.org/api/v1/data") %>%
req_auth_basic("your_username", "your_api_token") %>%
req_headers(`Accept` = "application/json") %>%
req_user_agent("R KoboToolbox Client")
resp_list <- req_perform(req_list)
# API endpoint to list assets
asset_list_url <- "https://kf.kobotoolbox.org/api/v2/assets/"
# Request to get all assets
req <- request(asset_list_url) %>%
req_auth_basic(username, api_token) %>%
req_headers(Accept = "application/json") %>%
req_user_agent("R KoboToolbox Client")
resp <- req_perform(req)
# API endpoint to list assets
asset_list_url <- "https://kf.kobotoolbox.org/api/v2/forms/"
# Request to get all assets
req <- request(asset_list_url) %>%
req_auth_basic(username, api_token) %>%
req_headers(Accept = "application/json") %>%
req_user_agent("R KoboToolbox Client")
resp <- req_perform(req)
resp <- req_perform(req)
library(httr2)
# Store your API key
api_key <- "86de4c11a3b1c2de54279896dfa70099558451eb"
# Define the base URL for KoboToolbox API
base_url <- "https://kf.kobotoolbox.org/api/v2/assets/"
response <- request(base_url) %>%
req_auth_bearer_token(api_key) %>%
req_perform()
# Check status code (200 = success)
resp_status(response)
# View the content of the response
assets_data <- resp_body_json(response)
str(assets_data, max.level = 2)
# Correct GET request
response <- request(base_url) %>%
req_auth_bearer_token(api_key) %>%
req_headers(
Accept = "application/json"
) %>%
req_perform()
# Check if it's returning JSON
resp_content_type(response)  # should say application/json
# Parse content
assets_data <- resp_body_json(response, simplifyVector = TRUE)
# View structure
str(assets_data, max.level = 2)
install.packages("KoboconnectR")
library(KoboconnectR)
username <- "vickman"
url <- "kf.kobotoolbox.org"
password <- "vickman"
get_kobo_token(url = url, uname = username, pwd = password)
# list of forms and the assert ID
kobotools_api(url = url, uname = username, pwd = password)
# list of forms and the assert ID
kobotools_api(url = url, uname = username, pwd = password)
# list of forms and the assert ID
kobotools_api(url = url, uname = username, pwd = password, simplified = FALSE)
?kobotools_api
library(tidyverse)
# list of forms and the assert ID
kobotools_api(url = url, uname = username, pwd = password, simplified = FALSE) %>% fromJSON(flatten = TRUE) %>%
as.data.frame()
# list of forms and the assert ID
kobotools_api(url = url, uname = username, pwd = password, simplified = T
)
# list of forms and the assert ID
kobotools_api(url = url, uname = username, pwd = password, simplified = F)
# list of forms and the assert ID
kobotools_api(url = url, uname = username, pwd = password, simplified = F)
kobo_df_download(url = url, uname = username, pwd = password)
kobo_df_download(url = url, uname = username, pwd = password, assetid = "awTmiW3RSrenXDRmDKEumq")
kobo_df_download(url = url, uname = username, pwd = password, assetid = "akWjF8fLC662zYmYYh6YwR")
df <- kobo_df_download(url = url, uname = username, pwd = password, assetid = "akWjF8fLC662zYmYYh6YwR")
pre_print <- kobo_df_download(url = url, uname = username, pwd = password, assetid = "aQQt7FwVwL63upPQPCHsKL")
View(pre_print)
pre_print2 <- kobo_df_download(url = url, uname = username, pwd = password, assetid = "aQQt7FwVwL63upPQPCHsKL")
rm(pre_print2)
ai_cohort1 <- kobo_df_download(url = url, uname = username, pwd = password, assetid = "akWjF8fLC662zYmYYh6YwR")
View(ai_cohort1)
names(ai_cohort1)
rm(list = ls())
username <- "vickman"
url <- "kf.kobotoolbox.org"
password <- "vickman"
get_kobo_token(url = url, uname = username, pwd = password)
ai_cohort1 <- kobo_df_download(url = url, uname = username, pwd = password, assetid = "akWjF8fLC662zYmYYh6YwR")
pre_print <- kobo_df_download(url = url, uname = username, pwd = password, assetid = "aQQt7FwVwL63upPQPCHsKL")
View(ai_cohort1)
names(ai_cohort1)
filter_cohort <- ai_cohort1 %>% select(8, 9, 17)
filter_cohort
glimpse(filter_cohort)
head(filter_cohort)
filter_cohort <- ai_cohort1 %>% select(8, 9, 17) %>%
rename(gender = "Your.gender",
country = "In.which.country.are.you.currently.located.",
availability = "What.time.would.you.be.comfortable.having.a.2.hour.session...regardless.of.your.country.of.residence.")
names(filter_cohort)
filter_cohort <- ai_cohort1 %>% select(8, 9, 17) %>%
rename(gender = "Your.gender.",
country = "In.which.country.are.you.currently.located.",
availability = "What.time.would.you.be.comfortable.having.a.2.hour.session...regardless.of.your.country.of.residence.")
head(filter_cohort)
summary(filter_cohort)
table(filter_cohort)
table(filter_cohort$gender)
table(filter_cohort$country)
table(filter_cohort$availability)
dim(filter_cohort)
mutate(income = rnorm(rep(seq(100:1000), 34))
filter_cohort <- ai_cohort1 %>% select(8, 9, 17) %>%
filter_cohort <- ai_cohort1 %>% select(8, 9, 17) %>%
rename(gender = "Your.gender.",
country = "In.which.country.are.you.currently.located.",
availability = "What.time.would.you.be.comfortable.having.a.2.hour.session...regardless.of.your.country.of.residence.") %>%
mutate(income = rnorm(rep(seq(100:1000), 34)))
filter_cohort <- ai_cohort1 %>%
select(8, 9, 17) %>%
rename(
gender = "Your.gender.",
country = "In.which.country.are.you.currently.located.",
availability = "What.time.would.you.be.comfortable.having.a.2.hour.session...regardless.of.your.country.of.residence."
) %>%
mutate(
income = runif(n(), min = 100, max = 1000),
poverty_index = runif(n(), min = 1, max = 100)
)
glimpse(filter_cohort)
library(shiny)
library(tidyverse)
# -------------------------------
# Module UI: Filters
# -------------------------------
filterUI <- function(id) {
ns <- NS(id)
tagList(
selectInput(ns("gender"), "Select Gender:", choices = c("All", unique(filter_cohort$gender))),
selectInput(ns("country"), "Select Country:", choices = c("All", unique(filter_cohort$country))),
selectInput(ns("availability"), "Select Availability:", choices = c("All", unique(filter_cohort$availability)))
)
}
# -------------------------------
# Module Server: Filters
# -------------------------------
filterServer <- function(id, data) {
moduleServer(id, function(input, output, session) {
reactive({
df <- data
if (input$gender != "All") df <- df %>% filter(gender == input$gender)
if (input$country != "All") df <- df %>% filter(country == input$country)
if (input$availability != "All") df <- df %>% filter(availability == input$availability)
df
})
})
}
names(filter_cohort)
# -------------------------------
# Module UI: Filters
# -------------------------------
filterUI <- function(id) {
ns <- NS(id)
tagList(
selectInput(ns("gender"), "Select Gender:", choices = c("All", unique(filter_cohort$gender))),
selectInput(ns("country"), "Select Country:", choices = c("All", unique(filter_cohort$country))),
selectInput(ns("availability"), "Select Availability:", choices = c("All", unique(filter_cohort$availability)))
)
}
# -------------------------------
# Module Server: Filters
# -------------------------------
filterServer <- function(id, data) {
moduleServer(id, function(input, output, session) {
reactive({
df <- data
if (input$gender != "All") df <- df %>% filter(gender == input$gender)
if (input$country != "All") df <- df %>% filter(country == input$country)
if (input$availability != "All") df <- df %>% filter(availability == input$availability)
df
})
})
}
# -------------------------------
# Module UI: Plots
# -------------------------------
plotUI <- function(id) {
ns <- NS(id)
tagList(
plotOutput(ns("plot1")),
plotOutput(ns("plot2"))
)
}
# -------------------------------
# Module Server: Plots
# -------------------------------
plotServer <- function(id, data) {
moduleServer(id, function(input, output, session) {
output$plot1 <- renderPlot({
data() %>%
group_by(gender) %>%
summarise(mean_income = mean(income, na.rm = TRUE)) %>%
ggplot(aes(x = gender, y = mean_income, fill = gender)) +
geom_bar(stat = "identity") +
labs(title = "Average Income by Gender", y = "Mean Income") +
theme_minimal()
})
output$plot2 <- renderPlot({
ggplot(data(), aes(x = income, y = poverty_index, color = country)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Income vs Poverty Index", x = "Income", y = "Poverty Index") +
theme_minimal()
})
})
}
# -------------------------------
# UI
# -------------------------------
ui <- fluidPage(
titlePanel("Cohort Dashboard"),
sidebarLayout(
sidebarPanel(
filterUI("filters")
),
mainPanel(
plotUI("plots")
)
)
)
# -------------------------------
# Server
# -------------------------------
server <- function(input, output, session) {
filtered_data <- filterServer("filters", filter_cohort)
plotServer("plots", filtered_data)
}
# Run the app
shinyApp(ui, server)
source(modules/filters_module.R)
source("modules/filters_module.R")
source("modules/filters_module.R")
source("modules/plot_module.R")
library(shiny)
library(dplyr)
library(ggplot2)
library(KoboconnectR)
source("modules/filters_module.R")
source("modules/plot_module.R")
# -------------------------------
# UI
# -------------------------------
ui <- fluidPage(
titlePanel("Cohort Dashboard"),
sidebarLayout(
sidebarPanel(
filterUI("filters")
),
mainPanel(
plotUI("plots")
)
)
)
# Define the reactivePoll within the server function
server <- function(input, output, session) {
# Reactive polling every 20 minutes
poll_data <- reactivePoll(
intervalMillis = 1200000,  # 20 minutes
session = session,
checkFunc = function() {
# Use the current time rounded to the nearest 20 minutes as a proxy
format(Sys.time(), "%Y-%m-%d %H:%M")
},
valueFunc = function() {
# Fetch data from KoboToolbox
ai_cohort1 <- kobo_df_download(
url = "kf.kobotoolbox.org",
uname = "vickman",
pwd = "vickman",
assetid = "akWjF8fLC662zYmYYh6YwR"
)
# Process the data
ai_cohort1 %>%
select(8, 9, 17) %>%
rename(
gender = "Your.gender.",
country = "In.which.country.are.you.currently.located.",
availability = "What.time.would.you.be.comfortable.having.a.2.hour.session...regardless.of.your.country.of.residence."
) %>%
mutate(
income = runif(n(), min = 100, max = 1000),
poverty_index = runif(n(), min = 1, max = 100)
)
}
)
# Use the polled data in your modules
filtered_data <- filterServer("filters", poll_data)
plotServer("plots", filtered_data)
}
# Run the app
shinyApp(ui, server)
runApp()
runApp()
install.packages("shinycssloaders")
runApp()
runApp()
getwd()
usethis::create_package("C:/Users/moubi/Downloads/git_files/kobo_auto1")
getwd()
devtools::document()
devtools::install()
install.packages("shinylive")
